{"ast":null,"code":"import axios from \"axios\";\nimport { axiosRequest } from \"utils/axiosRequest\";\nimport { HOSPITAL_LOGIN_REQUEST, HOSPITAL_LOGIN_SUCCESS, HOSPITAL_LOGIN_FAIL, HOSPITAL_REGISTER_REQUEST, HOSPITAL_REGISTER_SUCCESS, HOSPITAL_REGISTER_FAIL, HOSPITAL_PROFILE_EDIT, HOSPITAL_LOGOUT, HOSPITAL_EVENTS_ADD } from \"../constants/hospitalConstants\";\nconst BASE_URL = `http://localhost:5000/api`;\nexport const hospitalLoginAction = (email, password) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOSPITAL_LOGIN_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"http://localhost:5000/api/hospitals/loginHospital\", {\n      email,\n      password\n    });\n    console.log(data);\n    dispatch({\n      type: HOSPITAL_LOGIN_SUCCESS,\n      payload: data\n    });\n\n    //save loginuser to localstorage\n    // localStorage.setItem(\"hospitalInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: HOSPITAL_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n    throw new Error(error);\n  }\n};\nexport const hospitalLogOutAction = () => dispatch => {\n  dispatch({\n    type: HOSPITAL_LOGOUT\n  });\n};\nexport const hospitalRegisterAction = (name, email, password, contact1, contact2) => async dispatch => {\n  try {\n    dispatch({\n      type: HOSPITAL_REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"http://localhost:5000/api/hospitals/registerHospital\", {\n      name,\n      email,\n      password,\n      contact1,\n      contact2\n    });\n    console.log(data);\n    dispatch({\n      type: HOSPITAL_REGISTER_SUCCESS,\n      payload: data\n    });\n    // const data = { ...others, password };\n\n    // localStorage.setItem(\"hospitalInfo\", JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: HOSPITAL_REGISTER_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n    throw new Error(err);\n  }\n};\nexport const updateHospitalDescription = (id, description) => async dispatch => {\n  let reqBody = {\n    url: `${BASE_URL}/hospitals/${id}/updateHospital`,\n    method: \"put\",\n    body: description\n  };\n  let [data, error] = await axiosRequest(reqBody);\n  if (data) {\n    console.log(data);\n    dispatch({\n      type: HOSPITAL_PROFILE_EDIT,\n      payload: {\n        hospitalDescription: description\n      }\n    });\n  }\n  if (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n};\n\n// date: \"2022-01-01T00:00:00.000Z\"\n// desc: \"lkj\"\n// eventName: \"Vaccine\"\n// _id: \"610ea4c184f799302438e298\"\n\nexport const addHospitalEvents = (id, eventName, date, desc) => async dispatch => {\n  console.log(\"helo\", id);\n  let reqBody = {\n    url: `${BASE_URL}/hospitals/${id}/events/addEvents`,\n    method: \"post\",\n    body: {\n      eventName,\n      date,\n      desc\n    }\n  };\n  try {\n    const data = await axios.post(reqBody.url, reqBody.body);\n    console.log(\"Success\");\n    dispatch({\n      type: HOSPITAL_EVENTS_ADD,\n      payload: {\n        event: {\n          eventName,\n          date,\n          desc,\n          _id: Math.floor(Math.random() * 100000).toString()\n        }\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n};","map":{"version":3,"names":["axios","axiosRequest","HOSPITAL_LOGIN_REQUEST","HOSPITAL_LOGIN_SUCCESS","HOSPITAL_LOGIN_FAIL","HOSPITAL_REGISTER_REQUEST","HOSPITAL_REGISTER_SUCCESS","HOSPITAL_REGISTER_FAIL","HOSPITAL_PROFILE_EDIT","HOSPITAL_LOGOUT","HOSPITAL_EVENTS_ADD","BASE_URL","hospitalLoginAction","email","password","dispatch","getState","type","data","post","console","log","payload","error","response","message","Error","hospitalLogOutAction","hospitalRegisterAction","name","contact1","contact2","err","updateHospitalDescription","id","description","reqBody","url","method","body","hospitalDescription","addHospitalEvents","eventName","date","desc","event","_id","Math","floor","random","toString"],"sources":["C:/Users/barnw/OneDrive/Desktop/H-M-System-MERN/Hospital-Management-System-MERN/frontend/src/actions/hospitalActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { axiosRequest } from \"utils/axiosRequest\";\r\nimport {\r\n  HOSPITAL_LOGIN_REQUEST,\r\n  HOSPITAL_LOGIN_SUCCESS,\r\n  HOSPITAL_LOGIN_FAIL,\r\n  HOSPITAL_REGISTER_REQUEST,\r\n  HOSPITAL_REGISTER_SUCCESS,\r\n  HOSPITAL_REGISTER_FAIL,\r\n  HOSPITAL_PROFILE_EDIT,\r\n  HOSPITAL_LOGOUT,\r\n  HOSPITAL_EVENTS_ADD,\r\n} from \"../constants/hospitalConstants\";\r\n\r\nconst BASE_URL = `http://localhost:5000/api`;\r\n\r\nexport const hospitalLoginAction = (email, password) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({ type: HOSPITAL_LOGIN_REQUEST });\r\n    const { data } = await axios.post(\r\n      \"http://localhost:5000/api/hospitals/loginHospital\",\r\n      {\r\n        email,\r\n        password,\r\n      }\r\n    );\r\n    console.log(data);\r\n\r\n    dispatch({\r\n      type: HOSPITAL_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    //save loginuser to localstorage\r\n    // localStorage.setItem(\"hospitalInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: HOSPITAL_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n\r\n    throw new Error(error);\r\n  }\r\n};\r\nexport const hospitalLogOutAction = () => (dispatch) => {\r\n  dispatch({\r\n    type: HOSPITAL_LOGOUT,\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const hospitalRegisterAction = (\r\n  name,\r\n  email,\r\n  password,\r\n  contact1,\r\n  contact2\r\n) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: HOSPITAL_REGISTER_REQUEST,\r\n    });\r\n\r\n    const {\r\n      data,\r\n    } = await axios.post(\r\n      \"http://localhost:5000/api/hospitals/registerHospital\",\r\n      { name, email, password, contact1, contact2 }\r\n    );\r\n    console.log(data);\r\n    dispatch({\r\n      type: HOSPITAL_REGISTER_SUCCESS,\r\n      payload: data,\r\n    });\r\n    // const data = { ...others, password };\r\n\r\n    // localStorage.setItem(\"hospitalInfo\", JSON.stringify(data));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: HOSPITAL_REGISTER_FAIL,\r\n      payload:\r\n        err.response && err.response.data.message\r\n          ? err.response.data.message\r\n          : err.message,\r\n    });\r\n    throw new Error(err);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const updateHospitalDescription = (id, description) => async (\r\n  dispatch\r\n) => {\r\n  let reqBody = {\r\n    url: `${BASE_URL}/hospitals/${id}/updateHospital`,\r\n    method: \"put\",\r\n    body: description,\r\n  };\r\n\r\n  let [data, error] = await axiosRequest(reqBody);\r\n  if (data) {\r\n    console.log(data);\r\n    dispatch({\r\n      type: HOSPITAL_PROFILE_EDIT,\r\n      payload: {\r\n        hospitalDescription: description,\r\n      },\r\n    });\r\n  }\r\n  if (error) {\r\n    console.log(error);\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\n\r\n// date: \"2022-01-01T00:00:00.000Z\"\r\n// desc: \"lkj\"\r\n// eventName: \"Vaccine\"\r\n// _id: \"610ea4c184f799302438e298\"\r\n\r\nexport const addHospitalEvents = (id, eventName, date, desc) => async (\r\n  dispatch\r\n) => {\r\n  console.log(\"helo\", id);\r\n  let reqBody = {\r\n    url: `${BASE_URL}/hospitals/${id}/events/addEvents`,\r\n    method: \"post\",\r\n    body: { eventName, date, desc },\r\n  };\r\n  \r\n  try {\r\n    const data = await axios.post(reqBody.url, reqBody.body);\r\n    console.log(\"Success\")\r\n    dispatch({\r\n      type: HOSPITAL_EVENTS_ADD,\r\n        payload: {\r\n        event: { eventName, date, desc, _id: Math.floor(Math.random()*100_000).toString() },\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw new Error(error);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => React.useContext(FormContext);\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef, isRoot = true) => isProxyEnabled ? new Proxy(formState, {\n  get: (obj, prop) => {\n    if (prop in obj) {\n      if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n        readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n      }\n      localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n      return obj[prop];\n    }\n    return undefined;\n  }\n}) : formState;\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, readFormStateRef, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\nfunction useFormState(props) {\n  const {\n    control,\n    name\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    subjectsRef,\n    readFormStateRef\n  } = control || methods.control;\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: formState => (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState))\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\nfunction useController({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister\n}) {\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(field && field._f && !isUndefined(field._f.value) ? field._f.value : isUndefined(get(defaultValuesRef.current, name)) ? defaultValue : get(defaultValuesRef.current, name));\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, Object.assign(Object.assign({}, rules), {\n    value\n  }));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    const field = get(fieldsRef.current, name);\n    if (field && field._f) {\n      field._f._c = true;\n    }\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n      if (isNameInFieldArray(namesRef.current.array, name) ? shouldUnmountField && !inFieldArrayActionRef.current : shouldUnmountField) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => elm && ref(elm)\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nconst getFieldsValues = (fieldsRef, output = {}) => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f && _f.ref ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      current && getFieldsValues({\n        current\n      }, output[name]);\n    }\n  }\n  return output;\n};\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = (values = [], keyName) => values.map(value => Object.assign({\n  [keyName]: value && value[keyName] || generateId()\n}, value));\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || isDateObject(object1) || isDateObject(object2)) {\n    return object1 === object2;\n  }\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = object1[key];\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...data];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar isBoolean = value => typeof value === 'boolean';\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id',\n  shouldUnregister\n}) => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds((get(fieldsRef.current, name) && isMountedRef.current ? get(getFieldsValues(fieldsRef), name) : get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name) : get(defaultValuesRef.current, name)) || [], keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n  const omitKey = fields => fields.map((field = {}) => omit(field, keyName));\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n  const getFocusFieldName = (index, options) => options && !options.shouldFocus ? options.focusName || `${name}.${options.focusIndex}.` : `${name}.${index}.`;\n  const setFieldsAndNotify = (fieldsValues = []) => setFields(mapIds(fieldsValues, keyName));\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n  const batchStateUpdate = (method, args, updatedFieldArrayValues = [], shouldSet = true) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      cleanup(formStateRef.current.dirtyFields);\n    }\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n  const registerFieldArray = (values, index = 0, parentName = '') => values.forEach((appendValueItem, valueIndex) => {\n    const rootName = `${parentName || name}.${parentName ? valueIndex : index + valueIndex}`;\n    isPrimitive(appendValueItem) ? register(rootName, {\n      value: appendValueItem\n    }) : Object.entries(appendValueItem).forEach(([key, value]) => {\n      const inputName = rootName + '.' + key;\n      Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : register(inputName, {\n        value\n      });\n    });\n  });\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef)\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields])\n    });\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({\n        name: inputFieldArrayName,\n        values,\n        isReset\n      }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, values) : fieldArrayDefaultValuesRef.current = values;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues && set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\nvar isFileInput = element => element.type === 'file';\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n    if (ref.disabled) {\n      return;\n    }\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\nvar getResolverOptions = (fieldsNames, fieldsRefs, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = (options, mounted) => mounted && options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nvar skipValidation = ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar isFunction = value => typeof value === 'function';\nvar isString = value => typeof value === 'string';\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async ({\n  _f: {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    value: inputValue,\n    valueAsNumber,\n    mount\n  }\n}, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n  unsubscribe() {\n    this.observers = [];\n  }\n}\nconst isWindowUndefined = typeof window === 'undefined';\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {},\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode\n} = {}) {\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  });\n  const namesRef = React.useRef({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false\n  });\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n  const isFieldWatched = name => namesRef.current.watchAll || namesRef.current.watch.has(name) || namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n  const shouldRenderBaseOnError = React.useCallback(async (shouldSkipRender, name, error, inputState, isValidFromResolver, isWatched) => {\n    const previousError = get(formStateRef.current.errors, name);\n    const isValid = readFormStateRef.current.isValid ? resolver ? isValidFromResolver : await validateForm(fieldsRef.current, true) : false;\n    error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n    if ((isWatched || (error ? !deepEqual(previousError, error, true) : previousError) || !isEmptyObject(inputState) || formStateRef.current.isValid !== isValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign({}, inputState), {\n        isValid: !!isValid,\n        errors: formStateRef.current.errors,\n        name\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      subjectsRef.current.state.next(isWatched ? {\n        name\n      } : updatedFormState);\n    }\n    subjectsRef.current.state.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback((name, rawValue, options = {}, shouldRender, shouldRegister) => {\n    shouldRegister && register(name);\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const _f = field._f;\n      if (_f) {\n        const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n        if (isRadioInput(_f.ref) && !_f._c) {\n          (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n        } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n          _f.ref.files = value;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n        } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n          _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n        } else {\n          _f.ref.value = value;\n        }\n        if (shouldRender && _f._c) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          subjectsRef.current.control.next({\n            values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n            name\n          });\n        }\n        (options.shouldDirty || options.shouldTouch) && updateTouchAndDirtyState(name, value, options.shouldTouch);\n        options.shouldValidate && trigger(name);\n      } else {\n        field._f = {\n          ref: {\n            name,\n            value: rawValue\n          },\n          value: rawValue\n        };\n      }\n    }\n  }, []);\n  const getIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  const updateTouchAndDirtyState = React.useCallback((name, inputValue, isCurrentTouched, shouldRender = true) => {\n    const state = {\n      name\n    };\n    let isChanged = false;\n    if (readFormStateRef.current.isDirty) {\n      const previousIsDirty = formStateRef.current.isDirty;\n      formStateRef.current.isDirty = getIsDirty();\n      state.isDirty = formStateRef.current.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n    if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(formStateRef.current.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(get(defaultValuesRef.current, name), inputValue);\n      isCurrentFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      state.dirtyFields = formStateRef.current.dirtyFields;\n      isChanged = isChanged || isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n    }\n    const isPreviousFieldTouched = get(formStateRef.current.touchedFields, name);\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(formStateRef.current.touchedFields, name, isCurrentTouched);\n      state.touchedFields = formStateRef.current.touchedFields;\n      isChanged = isChanged || readFormStateRef.current.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isChanged && shouldRender && subjectsRef.current.state.next(state);\n    return isChanged ? state : {};\n  }, []);\n  const executeInlineValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n    shouldRenderBaseOnError(skipReRender, name, error);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeResolverValidation = React.useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n      }\n    } else {\n      formStateRef.current.errors = errors;\n    }\n    return errors;\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const validateForm = async (fieldsRef, shouldCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation);\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name] ? set(formStateRef.current.errors, _f.name, fieldError[_f.name]) : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const trigger = React.useCallback(async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name);\n    let isValid;\n    subjectsRef.current.state.next({\n      isValidating: true\n    });\n    if (resolver) {\n      const schemaResult = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = name ? fieldNames.every(name => !get(schemaResult, name)) : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (await Promise.all(fieldNames.filter(fieldName => get(fieldsRef.current, fieldName, {})._f).map(async fieldName => await executeInlineValidation(fieldName, true)))).every(Boolean);\n      } else {\n        await validateForm(fieldsRef.current);\n        isValid = isEmptyObject(formStateRef.current.errors);\n      }\n    }\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: formStateRef.current.errors,\n      isValidating: false\n    }));\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), name ? fieldNames : namesRef.current.mount);\n    }\n    readFormStateRef.current.isValid && updateIsValid();\n    return isValid;\n  }, [executeResolverValidation, executeInlineValidation]);\n  const updateIsValidAndInputValue = (name, ref) => {\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined ? isUndefined(get(fieldArrayDefaultValuesRef.current, name)) ? get(defaultValuesRef.current, name) : get(fieldArrayDefaultValuesRef.current, name) : field._f.value;\n      if (!isUndefined(defaultValue)) {\n        if (ref && ref.defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n  const updateIsValid = React.useCallback(async (values = {}) => {\n    const isValid = resolver ? isEmptyObject((await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef)), values), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation))).errors) : await validateForm(fieldsRef.current, true);\n    isValid !== formStateRef.current.isValid && subjectsRef.current.state.next({\n      isValid\n    });\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const setInternalValues = React.useCallback((name, value, options) => Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n    const fieldName = `${name}.${fieldKey}`;\n    const field = get(fieldsRef.current, fieldName);\n    const isFieldArray = namesRef.current.array.has(name);\n    (isFieldArray || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setInternalValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true, !field);\n  }), [trigger]);\n  const setValue = (name, value, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true\n      });\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n    (field && !field._f || isFieldArray) && !isNullOrUndefined(value) ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({\n      name,\n      values: getValues()\n    });\n  };\n  const handleChange = React.useCallback(async ({\n    type,\n    target,\n    target: {\n      value,\n      type: inputType\n    }\n  }) => {\n    let name = target.name;\n    let error;\n    let isValid;\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = !hasValidation(field._f, field._f.mount) && !resolver && !get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n      const inputState = updateTouchAndDirtyState(name, field._f.value, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(inputState) || isWatched;\n      if (shouldSkipValidation) {\n        !isBlurEvent && subjectsRef.current.watch.next({\n          name,\n          type,\n          values: getValues()\n        });\n        return shouldRender && subjectsRef.current.state.next(isWatched ? {\n          name\n        } : Object.assign(Object.assign({}, inputState), {\n          name\n        }));\n      }\n      subjectsRef.current.state.next({\n        isValidating: true\n      });\n      if (resolver) {\n        const {\n          errors\n        } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions([name], fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n          if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n      }\n      !isBlurEvent && subjectsRef.current.watch.next({\n        name,\n        type,\n        values: getValues()\n      });\n      shouldRenderBaseOnError(false, name, error, inputState, isValid, isWatched);\n    }\n  }, []);\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef));\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(formStateRef.current.errors, inputName)) : formStateRef.current.errors = {};\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal, formValues) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = formValues || isMountedRef.current ? Object.assign(Object.assign({}, defaultValuesRef.current), formValues || getFieldsValues(fieldsRef)) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue : {\n      [fieldNames]: defaultValue\n    };\n    if (isUndefined(fieldNames)) {\n      isGlobal && (namesRef.current.watchAll = true);\n      return fieldValues;\n    }\n    const result = [];\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && namesRef.current.watch.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n    return isArrayNames ? result : result[0];\n  }, []);\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? subjectsRef.current.watch.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n  const unregister = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n      if (get(fieldsRef.current, inputName)) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister && !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n      }\n    }\n    subjectsRef.current.watch.next({\n      values: getValues()\n    });\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n  const registerFieldRef = (name, ref, options) => {\n    register(name, options);\n    let field = get(fieldsRef.current, name);\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    if (ref === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === ref)) {\n      return;\n    }\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    updateIsValidAndInputValue(name, ref);\n  };\n  const register = React.useCallback((name, options = {}) => {\n    const field = get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    namesRef.current.mount.add(name);\n    !field && updateIsValidAndInputValue(name);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(fieldsRef.current, name, {});\n          const shouldUnmount = shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n            // If initial state of field element is disabled,\n            // value is not set on first \"register\"\n            // re-sync the value in when it switched to enabled\n            if (isUndefined(field._f.value)) {\n              field._f.value = field._f.ref.value;\n            }\n          }\n          shouldUnmount && !(isNameInFieldArray(namesRef.current.array, name) && inFieldArrayActionRef.current) && namesRef.current.unMount.add(name);\n        }\n      }\n    };\n  }, []);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = getFieldsValues(fieldsRef);\n    subjectsRef.current.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (resolver) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        subjectsRef.current.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), namesRef.current.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      subjectsRef.current.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode, shouldUseNativeValidation]);\n  const registerAbsentFields = (defaultValues, name = '') => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName, {\n            value\n          });\n        }\n      }\n    }\n  };\n  const reset = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues ? defaultValuesRef.current : Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.watch.next({\n        values: Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.array.next({\n        values: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false\n    };\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? formStateRef.current.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n  const setFocus = name => get(fieldsRef.current, name)._f.ref.focus();\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n    });\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      }\n    });\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = ref => !isHTMLElement(ref) || !document.contains(ref);\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name);\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregisterFieldNames.push(name);\n    }\n    unregisterFieldNames.length && unregister(unregisterFieldNames);\n    namesRef.current.unMount = new Set();\n  });\n  return {\n    control: React.useMemo(() => ({\n      register,\n      inFieldArrayActionRef,\n      getIsDirty,\n      subjectsRef,\n      watchInternal,\n      fieldsRef,\n      updateIsValid,\n      namesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef,\n      unregister,\n      shouldUnmount: shouldUnregister\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const {\n    watchInternal,\n    subjectsRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({\n        name: inputName,\n        values\n      }) => (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(fieldName => inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName)))) && updateValue(watchInternal(nameRef.current, defaultValue, false, values))\n    });\n    return () => watchSubscription.unsubscribe();\n  }, []);\n  return value;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isCheckBoxInput","element","type","isDateObject","data","Date","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","Object","assign","FormContext","React","createContext","displayName","useFormContext","useContext","FormProvider","props","createElement","Provider","children","getProxyFormState","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","prop","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","isWeb","window","HTMLElement","document","useFormState","control","methods","formStateRef","subjectsRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","state","subscribe","next","includes","unsubscribe","useController","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","namesRef","shouldUnmount","inFieldArrayActionRef","field","setInputStateValue","_f","ref","controllerSubscription","values","_c","shouldUnmountField","array","mount","elm","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","generateId","d","performance","now","c","r","Math","random","toString","mapIds","keyName","map","isPrimitive","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","slice","append","fillEmptyArray","fill","insert","moveArrayAt","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","isBoolean","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","useFieldArray","focusNameRef","isMountedRef","getIsDirty","updateIsValid","fieldArrayDefaultValuesRef","setFields","add","omitKey","getCurrentFieldsValues","getFocusFieldName","options","shouldFocus","focusName","focusIndex","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","registerFieldArray","forEach","appendValueItem","valueIndex","rootName","entries","inputName","append$1","appendValue","currentIndex","prepend$1","prependValue","remove","insert$1","insertValue","swap","fieldValues","move","watchAll","watchField","watch","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","fieldArrayValues","useCallback","isFileInput","isMultipleSelect","isRadioInput","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","getMultipleSelectValue","selected","defaultReturn","getRadioValue","previous","getFieldValue","files","getResolverOptions","fieldsRefs","criteriaMode","shouldUseNativeValidation","hasValidation","mounted","skipValidation","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isFunction","isString","isMessage","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","inputValue","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","getValidationModes","mode","isOnSubmit","isHTMLElement","isRadioOrCheckboxFunction","Subscription","constructor","tearDowns","tearDown","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","contextRef","Set","unMount","validationMode","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","radioRef","selectRef","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","Promise","fieldName","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","fieldKey","fieldValue","isFieldArray","setValue","getValues","handleChange","inputType","shouldSkipValidation","parentNodeName","currentError","clearErrors","setError","watchInternal","isGlobal","isArrayNames","info","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","useFieldArraySubscription","unregisterFieldNames","isLiveInDom","useMemo","useWatch","updateValue","watchSubscription"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/useFieldArray.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    field && field._f && !isUndefined(field._f.value)\n      ? field._f.value\n      : isUndefined(get(defaultValuesRef.current, name))\n      ? defaultValue\n      : get(defaultValuesRef.current, name),\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    const field = get(fieldsRef.current, name);\n\n    if (field && field._f) {\n      field._f._c = true;\n    }\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isNameInFieldArray(namesRef.current.array, name)\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  Path,\n  PathValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      (get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name)\n        : get(defaultValuesRef.current, name)) || [],\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}.`\n      : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${\n        parentName ? valueIndex : index + valueIndex\n      }`;\n      isPrimitive(appendValueItem)\n        ? (register as UseFormRegister<TFieldValues>)(\n            rootName as Path<TFieldValues>,\n            {\n              value: appendValueItem as PathValue<\n                TFieldValues,\n                Path<TFieldValues>\n              >,\n            },\n          )\n        : Object.entries(appendValueItem).forEach(([key, value]) => {\n            const inputName = rootName + '.' + key;\n\n            Array.isArray(value)\n              ? registerFieldArray(value, valueIndex, inputName)\n              : (register as UseFormRegister<TFieldValues>)(\n                  inputName as Path<TFieldValues>,\n                  { value },\n                );\n          });\n    });\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name as FieldPath<TFieldValues>);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues &&\n          set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref) && !_f._c) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender && _f._c) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setInternalValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}